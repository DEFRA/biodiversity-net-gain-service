#!/bin/sh
# Set environment variables required to connect to the Azurite default storage account as standard when running unit tests.
# The default storage account details are in the public domain.
export AZURE_STORAGE_ACCOUNT=${AZURITE_STORAGE_ACCOUNT:-devstoreaccount1}
export AZURE_STORAGE_ACCESS_KEY=${AZURITE_STORAGE_ACCESS_KEY:-Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==}
export AZURE_BLOB_SERVICE_URL=${AZURITE_BLOB_SERVICE_URL:-http://localhost:10000/${AZURE_STORAGE_ACCOUNT}}
export AZURE_QUEUE_SERVICE_URL=${AZURITE_QUEUE_SERVICE_URL:-http://localhost:10001/${AZURE_STORAGE_ACCOUNT}}
# The geoprocessing service delegates to native code that requires this environment variable for Azurite connectivity.
# Environment variables set through Node.js do not appear to propagate to native code.
export AZURE_STORAGE_CONNECTION_STRING=${AZURITE_STORAGE_CONNECTION_STRING:-DefaultEndpointsProtocol=http;AccountName=${AZURE_STORAGE_ACCOUNT};AccountKey=${AZURE_STORAGE_ACCESS_KEY};BlobEndpoint=${AZURE_BLOB_SERVICE_URL};}
export DOCKER_BUILDKIT=1

destroy_test_double_infrastructure=0

if `nc -z localhost 10000 && nc -z localhost 10001 && nc -z localhost 8082 && nc -z localhost 8888`; then
  echo Test double infrastructure is running
else
  echo Setting up test double infrastructure
  npm run docker:start-test-double-infrastructure
  destroy_test_double_infrastructure=1
  echo Waiting for test double infrastructure to initialise
  # Sleep for twenty seconds as the nc utility reports successful connectivity on test double infrastructure ports before requests can be processed successfully.
  sleep 20
fi

jest --runInBand

# Use the exit code from Jest as the script exit code so that test
# failures are propagated to any continuous integration/deployment
# pipeline.
exitCode=$?

if [ ${destroy_test_double_infrastructure} = 1 ]; then
  npm run docker:stop-test-double-infrastructure
  echo Test double infrastructure has been destroyed
fi

exit ${exitCode}
