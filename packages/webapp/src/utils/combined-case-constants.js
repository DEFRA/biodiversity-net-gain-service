import landConstants from './loj-constants.js'
import developerConstants from './developer-constants.js'

const {
  routes: {
    AGENT_ACTING_FOR_CLIENT,
    UPLOAD_LAND_OWNERSHIP,
    LAND_OWNERSHIP_PROOF_LIST,
    CHECK_PROOF_OF_OWNERSHIP,
    UPLOAD_LAND_BOUNDARY,
    CHECK_LAND_BOUNDARY_DETAILS,
    CHECK_LAND_BOUNDARY,
    ADD_HECTARES,
    CHECK_UPLOAD_METRIC,
    CHECK_HABITAT_BASELINE,
    CHECK_HABITAT_CREATED,
    UPLOAD_METRIC,
    CHECK_METRIC_DETAILS,
    LEGAL_AGREEMENT_TYPE,
    CHECK_LEGAL_AGREEMENT_DETAILS,
    UPLOAD_LOCAL_LAND_CHARGE,
    CHECK_LOCAL_LAND_CHARGE_FILE,
    REGISTER_LAND_TASK_LIST
  }
} = landConstants
const {
  routes: {
    DEVELOPER_DEVELOPMENT_PROJECT_INFORMATION,
    DEVELOPER_UPLOAD_PLANNING_DECISION_NOTICE,
    DEVELOPER_CHECK_PLANNING_DECISION_NOTICE_FILE
  }
} = developerConstants

const routes = {
  COMBINED_CASE_TASK_LIST: 'combined-case/tasklist',
  COMBINED_CASE_CHECK_AND_SUBMIT: 'combined-case/check-and-submit',
  COMBINED_CASE_UPLOAD_ALLOCATION_METRIC: 'combined-case/upload-allocation-metric',
  COMBINED_CASE_CHECK_UPLOAD_ALLOCATION_METRIC: 'combined-case/check-allocation-metric',
  COMBINED_CASE_MATCH_AVAILABLE_HABITATS: 'combined-case/match-allocation'
}
const views = Object.fromEntries(
  Object.entries(routes).map(([k, v]) => [k, v.substring(1)])
)

const redisKeys = {
  COMBINED_CASE_MATCH_AVAILABLE_HABITATS_COMPLETE: 'combined-case-match-available-habitats-complete'
}

const routesToReuse = [
  `/${AGENT_ACTING_FOR_CLIENT}`,
  `/${DEVELOPER_DEVELOPMENT_PROJECT_INFORMATION}`,
  `/${DEVELOPER_UPLOAD_PLANNING_DECISION_NOTICE}`,
  `/${DEVELOPER_CHECK_PLANNING_DECISION_NOTICE_FILE}`,
  `/${UPLOAD_LAND_OWNERSHIP}`,
  `/${LAND_OWNERSHIP_PROOF_LIST}`,
  `/${CHECK_PROOF_OF_OWNERSHIP}`,
  `/${UPLOAD_LAND_BOUNDARY}`,
  `/${CHECK_LAND_BOUNDARY_DETAILS}`,
  `/${CHECK_LAND_BOUNDARY}`,
  `/${ADD_HECTARES}`,
  `/${CHECK_UPLOAD_METRIC}`,
  `/${CHECK_HABITAT_BASELINE}`,
  `/${CHECK_HABITAT_CREATED}`,
  `/${UPLOAD_METRIC}`,
  `/${CHECK_METRIC_DETAILS}`,
  `/${LEGAL_AGREEMENT_TYPE}`,
  `/${CHECK_LEGAL_AGREEMENT_DETAILS}`,
  `/${UPLOAD_LOCAL_LAND_CHARGE}`,
  `/${CHECK_LOCAL_LAND_CHARGE_FILE}`,
  `/${REGISTER_LAND_TASK_LIST}`
]

const reusedRoutePath = (baseUrl, originalRoute) => {
  const pathParts = originalRoute.split('/')
  const page = pathParts[pathParts.length - 1]
  return `${baseUrl}/${page}`
}

const baseUrl = '/combined-case'

const reusedRoutes = {
  COMBINED_CASE_AGENT_ACTING_FOR_CLIENT: reusedRoutePath(baseUrl, AGENT_ACTING_FOR_CLIENT),
  COMBINED_CASE_DEVELOPMENT_PROJECT_INFORMATION: reusedRoutePath(baseUrl, DEVELOPER_DEVELOPMENT_PROJECT_INFORMATION),
  COMBINED_CASE_UPLOAD_PLANNING_DECISION_NOTICE: reusedRoutePath(baseUrl, DEVELOPER_UPLOAD_PLANNING_DECISION_NOTICE),
  COMBINED_CASE_CHECK_PLANNING_DECISION_NOTICE_FILE: reusedRoutePath(baseUrl, DEVELOPER_CHECK_PLANNING_DECISION_NOTICE_FILE),
  COMBINED_CASE_UPLOAD_LAND_OWNERSHIP: reusedRoutePath(baseUrl, UPLOAD_LAND_OWNERSHIP),
  COMBINED_CASE_LAND_OWNERSHIP_PROOF_LIST: reusedRoutePath(baseUrl, LAND_OWNERSHIP_PROOF_LIST),
  COMBINED_CASE_CHECK_PROOF_OF_OWNERSHIP: reusedRoutePath(baseUrl, CHECK_PROOF_OF_OWNERSHIP),
  COMBINED_CASE_UPLOAD_LAND_BOUNDARY: reusedRoutePath(baseUrl, UPLOAD_LAND_BOUNDARY),
  COMBINED_CASE_CHECK_LAND_BOUNDARY_DETAILS: reusedRoutePath(baseUrl, CHECK_LAND_BOUNDARY_DETAILS),
  COMBINED_CASE_CHECK_LAND_BOUNDARY: reusedRoutePath(baseUrl, CHECK_LAND_BOUNDARY),
  COMBINED_CASE_ADD_HECTARES: reusedRoutePath(baseUrl, ADD_HECTARES),
  COMBINED_CASE_CHECK_UPLOAD_METRIC: reusedRoutePath(baseUrl, CHECK_UPLOAD_METRIC),
  COMBINED_CASE_CHECK_HABITAT_BASELINE: reusedRoutePath(baseUrl, CHECK_HABITAT_BASELINE),
  COMBINED_CASE_CHECK_HABITAT_CREATED: reusedRoutePath(baseUrl, CHECK_HABITAT_CREATED),
  COMBINED_CASE_UPLOAD_METRIC: reusedRoutePath(baseUrl, UPLOAD_METRIC),
  COMBINED_CASE_CHECK_METRIC_DETAILS: reusedRoutePath(baseUrl, CHECK_METRIC_DETAILS),
  COMBINED_CASE_LEGAL_AGREEMENT_TYPE: reusedRoutePath(baseUrl, LEGAL_AGREEMENT_TYPE),
  COMBINED_CASE_CHECK_LEGAL_AGREEMENT_DETAILS: reusedRoutePath(baseUrl, CHECK_LEGAL_AGREEMENT_DETAILS),
  COMBINED_CASE_UPLOAD_LOCAL_LAND_CHARGE: reusedRoutePath(baseUrl, UPLOAD_LOCAL_LAND_CHARGE),
  COMBINED_CASE_CHECK_LOCAL_LAND_CHARGE_FILE: reusedRoutePath(baseUrl, CHECK_LOCAL_LAND_CHARGE_FILE),
  COMBINED_CASE_REGISTER_LAND_TASK_LIST: reusedRoutePath(baseUrl, REGISTER_LAND_TASK_LIST)
}

export {
  routes,
  views,
  redisKeys,
  routesToReuse,
  reusedRoutes,
  baseUrl
}
