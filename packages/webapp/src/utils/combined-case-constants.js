import landConstants from './loj-constants.js'
import developerConstants from './developer-constants.js'

const {
  routes: {
    AGENT_ACTING_FOR_CLIENT,
    CHECK_DEFRA_ACCOUNT_DETAILS,
    APPLICATION_BY_INDIVIDUAL_OR_ORGANISATION,
    CLIENT_INDIVIDUAL_ORGANISATION,
    IS_ADDRESS_UK,
    CLIENTS_NAME,
    CLIENTS_ORGANISATION_NAME,
    DEFRA_ACCOUNT_NOT_LINKED,
    NON_UK_ADDRESS,
    UK_ADDRESS,
    CHECK_APPLICANT_INFORMATION,
    CLIENTS_EMAIL_ADDRESS,
    UPLOAD_WRITTEN_AUTHORISATION,
    CHECK_WRITTEN_AUTHORISATION_FILE,
    CLIENTS_PHONE_NUMBER,
    UPLOAD_LAND_OWNERSHIP,
    LAND_OWNERSHIP_PROOF_LIST,
    CHECK_PROOF_OF_OWNERSHIP,
    UPLOAD_LAND_BOUNDARY,
    CHECK_LAND_BOUNDARY_DETAILS,
    CHECK_LAND_BOUNDARY,
    ADD_HECTARES,
    CHECK_UPLOAD_METRIC,
    CHECK_HABITAT_BASELINE,
    CHECK_HABITAT_CREATED,
    UPLOAD_METRIC,
    CHECK_METRIC_DETAILS,
    LEGAL_AGREEMENT_TYPE,
    CHECK_LEGAL_AGREEMENT_DETAILS,
    UPLOAD_LOCAL_LAND_CHARGE,
    CHECK_LOCAL_LAND_CHARGE_FILE,
    REGISTER_LAND_TASK_LIST,
    ADD_GRID_REFERENCE,
    NEED_ADD_ALL_LEGAL_FILES,
    NEED_LEGAL_AGREEMENT,
    UPLOAD_LEGAL_AGREEMENT,
    CHECK_LEGAL_AGREEMENT,
    CHECK_LEGAL_AGREEMENT_FILES,
    NEED_ADD_ALL_RESPONSIBLE_BODIES,
    NEED_ADD_ALL_PLANNING_AUTHORITIES,
    ADD_RESPONSIBLE_BODY_CONVERSATION_COVENANT,
    CHECK_RESPONSIBLE_BODIES,
    ANY_OTHER_LANDOWNERS,
    LANDOWNER_INDIVIDUAL_ORGANISATION,
    HABITAT_PLAN_LEGAL_AGREEMENT,
    ADD_LANDOWNER_INDIVIDUAL,
    ADD_LANDOWNER_ORGANISATION,
    CHECK_LANDOWNERS,
    ENHANCEMENT_WORKS_START_DATE,
    UPLOAD_HABITAT_PLAN,
    CHECK_HABITAT_PLAN_FILE,
    HABITAT_ENHANCEMENTS_END_DATE,
    ADD_PLANNING_AUTHORITY,
    CHECK_PLANNING_AUTHORITIES
  }
} = landConstants
const {
  routes: {
    DEVELOPER_DEVELOPMENT_PROJECT_INFORMATION,
    DEVELOPER_UPLOAD_PLANNING_DECISION_NOTICE,
    DEVELOPER_CHECK_PLANNING_DECISION_NOTICE_FILE
  }
} = developerConstants

const routes = {
  COMBINED_CASE_TASK_LIST: 'combined-case/tasklist',
  COMBINED_CASE_CHECK_AND_SUBMIT: 'combined-case/check-and-submit',
  COMBINED_CASE_UPLOAD_ALLOCATION_METRIC: 'combined-case/upload-allocation-metric',
  COMBINED_CASE_CHECK_UPLOAD_ALLOCATION_METRIC: 'combined-case/check-allocation-metric',
  COMBINED_CASE_MATCH_AVAILABLE_HABITATS: 'combined-case/match-allocation',
  COMBINED_CASE_PROJECTS: 'combined-case/combined-case-projects',
  COMBINED_CASE_CONTINUE_PROJECT: 'combined-case/continue-combined-case-project',
  COMBINED_CASE_NEW_PROJECT: 'combined-case/new-combined-case-project'
}

const views = Object.fromEntries(
  Object.entries(routes).map(([k, v]) => [k, v.substring(1)])
)

const redisKeys = {
  COMBINED_CASE_MATCH_AVAILABLE_HABITATS_COMPLETE: 'combined-case-match-available-habitats-complete'
}

const routesToReuse = [
  `/${AGENT_ACTING_FOR_CLIENT}`,
  `/${DEVELOPER_DEVELOPMENT_PROJECT_INFORMATION}`,
  `/${DEVELOPER_UPLOAD_PLANNING_DECISION_NOTICE}`,
  `/${DEVELOPER_CHECK_PLANNING_DECISION_NOTICE_FILE}`,
  `/${UPLOAD_LAND_OWNERSHIP}`,
  `/${LAND_OWNERSHIP_PROOF_LIST}`,
  `/${CHECK_PROOF_OF_OWNERSHIP}`,
  `/${UPLOAD_LAND_BOUNDARY}`,
  `/${CHECK_LAND_BOUNDARY_DETAILS}`,
  `/${CHECK_LAND_BOUNDARY}`,
  `/${ADD_HECTARES}`,
  `/${CHECK_UPLOAD_METRIC}`,
  `/${CHECK_HABITAT_BASELINE}`,
  `/${CHECK_HABITAT_CREATED}`,
  `/${UPLOAD_METRIC}`,
  `/${CHECK_METRIC_DETAILS}`,
  `/${LEGAL_AGREEMENT_TYPE}`,
  `/${CHECK_LEGAL_AGREEMENT_DETAILS}`,
  `/${UPLOAD_LOCAL_LAND_CHARGE}`,
  `/${CHECK_LOCAL_LAND_CHARGE_FILE}`,
  `/${REGISTER_LAND_TASK_LIST}`,
  `/${CHECK_DEFRA_ACCOUNT_DETAILS}`,
  `/${APPLICATION_BY_INDIVIDUAL_OR_ORGANISATION}`,
  `/${CLIENT_INDIVIDUAL_ORGANISATION}`,
  `/${IS_ADDRESS_UK}`,
  `/${CLIENTS_NAME}`,
  `/${CLIENTS_ORGANISATION_NAME}`,
  `/${DEFRA_ACCOUNT_NOT_LINKED}`,
  `/${NON_UK_ADDRESS}`,
  `/${UK_ADDRESS}`,
  `/${CHECK_APPLICANT_INFORMATION}`,
  `/${CLIENTS_EMAIL_ADDRESS}`,
  `/${UPLOAD_WRITTEN_AUTHORISATION}`,
  `/${CHECK_WRITTEN_AUTHORISATION_FILE}`,
  `/${CLIENTS_PHONE_NUMBER}`,
  `/${ADD_GRID_REFERENCE}`,
  `/${NEED_ADD_ALL_LEGAL_FILES}`,
  `/${NEED_LEGAL_AGREEMENT}`,
  `/${UPLOAD_LEGAL_AGREEMENT}`,
  `/${CHECK_LEGAL_AGREEMENT}`,
  `/${CHECK_LEGAL_AGREEMENT_FILES}`,
  `/${NEED_ADD_ALL_RESPONSIBLE_BODIES}`,
  `/${NEED_ADD_ALL_PLANNING_AUTHORITIES}`,
  `/${ADD_RESPONSIBLE_BODY_CONVERSATION_COVENANT}`,
  `/${CHECK_RESPONSIBLE_BODIES}`,
  `/${ANY_OTHER_LANDOWNERS}`,
  `/${LANDOWNER_INDIVIDUAL_ORGANISATION}`,
  `/${HABITAT_PLAN_LEGAL_AGREEMENT}`,
  `/${ADD_LANDOWNER_INDIVIDUAL}`,
  `/${ADD_LANDOWNER_ORGANISATION}`,
  `/${CHECK_LANDOWNERS}`,
  `/${ENHANCEMENT_WORKS_START_DATE}`,
  `/${UPLOAD_HABITAT_PLAN}`,
  `/${CHECK_HABITAT_PLAN_FILE}`,
  `/${HABITAT_ENHANCEMENTS_END_DATE}`,
  `/${ADD_PLANNING_AUTHORITY}`,
  `/${CHECK_PLANNING_AUTHORITIES}`
]

const reusedRoutePath = (baseUrl, originalRoute) => {
  const pathParts = originalRoute.split('/')
  const page = pathParts[pathParts.length - 1]
  return `${baseUrl}/${page}`
}

const baseUrl = '/combined-case'

const reusedRoutes = {
  COMBINED_CASE_AGENT_ACTING_FOR_CLIENT: reusedRoutePath(baseUrl, AGENT_ACTING_FOR_CLIENT),
  COMBINED_CASE_DEVELOPMENT_PROJECT_INFORMATION: reusedRoutePath(baseUrl, DEVELOPER_DEVELOPMENT_PROJECT_INFORMATION),
  COMBINED_CASE_UPLOAD_PLANNING_DECISION_NOTICE: reusedRoutePath(baseUrl, DEVELOPER_UPLOAD_PLANNING_DECISION_NOTICE),
  COMBINED_CASE_CHECK_PLANNING_DECISION_NOTICE_FILE: reusedRoutePath(baseUrl, DEVELOPER_CHECK_PLANNING_DECISION_NOTICE_FILE),
  COMBINED_CASE_UPLOAD_LAND_OWNERSHIP: reusedRoutePath(baseUrl, UPLOAD_LAND_OWNERSHIP),
  COMBINED_CASE_LAND_OWNERSHIP_PROOF_LIST: reusedRoutePath(baseUrl, LAND_OWNERSHIP_PROOF_LIST),
  COMBINED_CASE_CHECK_PROOF_OF_OWNERSHIP: reusedRoutePath(baseUrl, CHECK_PROOF_OF_OWNERSHIP),
  COMBINED_CASE_UPLOAD_LAND_BOUNDARY: reusedRoutePath(baseUrl, UPLOAD_LAND_BOUNDARY),
  COMBINED_CASE_CHECK_LAND_BOUNDARY_DETAILS: reusedRoutePath(baseUrl, CHECK_LAND_BOUNDARY_DETAILS),
  COMBINED_CASE_CHECK_LAND_BOUNDARY: reusedRoutePath(baseUrl, CHECK_LAND_BOUNDARY),
  COMBINED_CASE_ADD_HECTARES: reusedRoutePath(baseUrl, ADD_HECTARES),
  COMBINED_CASE_CHECK_UPLOAD_METRIC: reusedRoutePath(baseUrl, CHECK_UPLOAD_METRIC),
  COMBINED_CASE_CHECK_HABITAT_BASELINE: reusedRoutePath(baseUrl, CHECK_HABITAT_BASELINE),
  COMBINED_CASE_CHECK_HABITAT_CREATED: reusedRoutePath(baseUrl, CHECK_HABITAT_CREATED),
  COMBINED_CASE_UPLOAD_METRIC: reusedRoutePath(baseUrl, UPLOAD_METRIC),
  COMBINED_CASE_CHECK_METRIC_DETAILS: reusedRoutePath(baseUrl, CHECK_METRIC_DETAILS),
  COMBINED_CASE_LEGAL_AGREEMENT_TYPE: reusedRoutePath(baseUrl, LEGAL_AGREEMENT_TYPE),
  COMBINED_CASE_CHECK_LEGAL_AGREEMENT_DETAILS: reusedRoutePath(baseUrl, CHECK_LEGAL_AGREEMENT_DETAILS),
  COMBINED_CASE_UPLOAD_LOCAL_LAND_CHARGE: reusedRoutePath(baseUrl, UPLOAD_LOCAL_LAND_CHARGE),
  COMBINED_CASE_CHECK_LOCAL_LAND_CHARGE_FILE: reusedRoutePath(baseUrl, CHECK_LOCAL_LAND_CHARGE_FILE),
  COMBINED_CASE_CHECK_DEFRA_ACCOUNT_DETAILS: reusedRoutePath(baseUrl, CHECK_DEFRA_ACCOUNT_DETAILS),
  COMBINED_CASE_APPLICATION_BY_INDIVIDUAL_OR_ORGANISATION: reusedRoutePath(baseUrl, APPLICATION_BY_INDIVIDUAL_OR_ORGANISATION),
  COMBINED_CASE_CLIENT_INDIVIDUAL_ORGANISATION: reusedRoutePath(baseUrl, CLIENT_INDIVIDUAL_ORGANISATION),
  COMBINED_CASE_IS_ADDRESS_UK: reusedRoutePath(baseUrl, IS_ADDRESS_UK),
  COMBINED_CASE_CLIENTS_NAME: reusedRoutePath(baseUrl, CLIENTS_NAME),
  COMBINED_CASE_CLIENTS_ORGANISATION_NAME: reusedRoutePath(baseUrl, CLIENTS_ORGANISATION_NAME),
  COMBINED_CASE_DEFRA_ACCOUNT_NOT_LINKED: reusedRoutePath(baseUrl, DEFRA_ACCOUNT_NOT_LINKED),
  COMBINED_CASE_NON_UK_ADDRESS: reusedRoutePath(baseUrl, NON_UK_ADDRESS),
  COMBINED_CASE_UK_ADDRESS: reusedRoutePath(baseUrl, UK_ADDRESS),
  COMBINED_CASE_CHECK_APPLICANT_INFORMATION: reusedRoutePath(baseUrl, CHECK_APPLICANT_INFORMATION),
  COMBINED_CASE_CLIENTS_EMAIL_ADDRESS: reusedRoutePath(baseUrl, CLIENTS_EMAIL_ADDRESS),
  COMBINED_CASE_UPLOAD_WRITTEN_AUTHORISATION: reusedRoutePath(baseUrl, UPLOAD_WRITTEN_AUTHORISATION),
  COMBINED_CASE_CHECK_WRITTEN_AUTHORISATION_FILE: reusedRoutePath(baseUrl, CHECK_WRITTEN_AUTHORISATION_FILE),
  COMBINED_CASE_CLIENTS_PHONE_NUMBER: reusedRoutePath(baseUrl, CLIENTS_PHONE_NUMBER),
  COMBINED_CASE_ADD_GRID_REFERENCE: reusedRoutePath(baseUrl, ADD_GRID_REFERENCE),
  COMBINED_CASE_NEED_ADD_ALL_LEGAL_FILES: reusedRoutePath(baseUrl, NEED_ADD_ALL_LEGAL_FILES),
  COMBINED_CASE_NEED_LEGAL_AGREEMENT: reusedRoutePath(baseUrl, NEED_LEGAL_AGREEMENT),
  COMBINED_CASE_UPLOAD_LEGAL_AGREEMENT: reusedRoutePath(baseUrl, UPLOAD_LEGAL_AGREEMENT),
  COMBINED_CASE_CHECK_LEGAL_AGREEMENT: reusedRoutePath(baseUrl, CHECK_LEGAL_AGREEMENT),
  COMBINED_CASE_CHECK_LEGAL_AGREEMENT_FILES: reusedRoutePath(baseUrl, CHECK_LEGAL_AGREEMENT_FILES),
  COMBINED_CASE_NEED_ADD_ALL_RESPONSIBLE_BODIES: reusedRoutePath(baseUrl, NEED_ADD_ALL_RESPONSIBLE_BODIES),
  COMBINED_CASE_NEED_ADD_ALL_PLANNING_AUTHORITIES: reusedRoutePath(baseUrl, NEED_ADD_ALL_PLANNING_AUTHORITIES),
  COMBINED_CASE_ADD_RESPONSIBLE_BODY_CONVERSATION_COVENANT: reusedRoutePath(baseUrl, ADD_RESPONSIBLE_BODY_CONVERSATION_COVENANT),
  COMBINED_CASE_CHECK_RESPONSIBLE_BODIES: reusedRoutePath(baseUrl, CHECK_RESPONSIBLE_BODIES),
  COMBINED_CASE_ANY_OTHER_LANDOWNERS: reusedRoutePath(baseUrl, ANY_OTHER_LANDOWNERS),
  COMBINED_CASE_LANDOWNER_INDIVIDUAL_ORGANISATION: reusedRoutePath(baseUrl, LANDOWNER_INDIVIDUAL_ORGANISATION),
  COMBINED_CASE_HABITAT_PLAN_LEGAL_AGREEMENT: reusedRoutePath(baseUrl, HABITAT_PLAN_LEGAL_AGREEMENT),
  COMBINED_CASE_ADD_LANDOWNER_INDIVIDUAL: reusedRoutePath(baseUrl, ADD_LANDOWNER_INDIVIDUAL),
  COMBINED_CASE_ADD_LANDOWNER_ORGANISATION: reusedRoutePath(baseUrl, ADD_LANDOWNER_ORGANISATION),
  COMBINED_CASE_CHECK_LANDOWNERS: reusedRoutePath(baseUrl, CHECK_LANDOWNERS),
  COMBINED_CASE_ENHANCEMENT_WORKS_START_DATE: reusedRoutePath(baseUrl, ENHANCEMENT_WORKS_START_DATE),
  COMBINED_CASE_UPLOAD_HABITAT_PLAN: reusedRoutePath(baseUrl, UPLOAD_HABITAT_PLAN),
  COMBINED_CASE_CHECK_HABITAT_PLAN_FILE: reusedRoutePath(baseUrl, CHECK_HABITAT_PLAN_FILE),
  COMBINED_CASE_HABITAT_ENHANCEMENTS_END_DATE: reusedRoutePath(baseUrl, HABITAT_ENHANCEMENTS_END_DATE),
  COMBINED_CASE_ADD_PLANNING_AUTHORITY: reusedRoutePath(baseUrl, ADD_PLANNING_AUTHORITY),
  COMBINED_CASE_CHECK_PLANNING_AUTHORITIES: reusedRoutePath(baseUrl, CHECK_PLANNING_AUTHORITIES)
}

export {
  routes,
  views,
  redisKeys,
  routesToReuse,
  reusedRoutes,
  baseUrl
}
