import buildSignalRMessage from '../../Shared/build-signalr-message.js'
import { CoordinateSystemValidationError, ValidationError } from '@defra/bng-errors-lib'
import { blobStorageConnector } from '@defra/bng-connectors-lib'
import { processLandBoundary } from '@defra/bng-geoprocessing-service'

const GEOJSON_FILE_EXTENSION = '.geojson'

export default async function (context, config) {
  // Defect - BNGP-1711.
  // Add a timestamp to GeoJSON files created by GDAL so that the filename is unique.
  // If an attempt is made to open a file with the same name as an existing file generated by GDAL,
  // an error occurs until the function app is restarted.
  const isGeoJsonFile = config.fileConfig.fileExtension === GEOJSON_FILE_EXTENSION
  const tmpGeoJsonBlobName =
   `${config.fileConfig.fileDirectory}/${config.fileConfig.filename}${new Date().toISOString()}${GEOJSON_FILE_EXTENSION}`
  const geoJsonBlobName = `${config.fileConfig.fileDirectory}/${config.fileConfig.filename}${GEOJSON_FILE_EXTENSION}`

  const landBoundaryConfig = {
    bufferDistance: process.env.LAND_BOUNDARY_BUFFER_DISTANCE || 500,
    inputLocation: `${config.fileConfig.fileExtension === '.zip' ? '/vsizip' : ''}/vsiaz_streaming/trusted/${config.fileConfig.fileLocation}`,
    // Prepare to use the GDAL virtual file system to convert a geospatial land boundary uploaded by a user to GeoJSON (if needed).
    outputLocation: `/vsiaz/trusted/${tmpGeoJsonBlobName}`,
    gdalEnvVars: gdalEnvVars()
  }

  if (isGeoJsonFile) {
    // If a GeoJSON file has been uploaded it does not need converting to GeoJSON and writing back to blob storage.
    delete landBoundaryConfig.outputLocation
  }

  let signalRMessageArguments
  try {
    const mapConfig = await processLandBoundary(context.log, landBoundaryConfig)

    // Defect BNGP-1711.
    if (!isGeoJsonFile) {
      // If a timestamped GeoJSON file has been created, remove the timestamp from the filename using the
      // Azure blob storge API. This preserves the GeoJSON filename so that dependent BNG software remains
      // unchanged and allows the GeoJSON file to be overwritten by the user if required.
      await moveBlob(tmpGeoJsonBlobName, geoJsonBlobName)
    }

    signalRMessageArguments = [{
      location: geoJsonBlobName,
      mapConfig
    }]
  } catch (err) {
    if (err instanceof CoordinateSystemValidationError) {
      signalRMessageArguments = [{
        authorityKey: err.authorityKey,
        errorCode: err.code
      }]
    } else if (err instanceof ValidationError) {
      signalRMessageArguments = [{ errorCode: err.code }]
    } else {
      signalRMessageArguments = [{ errorMessage: err.message }]
    }
  } finally {
    context.bindings.signalRMessages = [buildSignalRMessage(config.signalRMessageConfig, signalRMessageArguments)]
  }
}

const moveBlob = async (sourceBlobName, targetBlobName) => {
  const blobConfig = {
    source: {
      containerName: 'trusted',
      blobName: sourceBlobName
    },
    target: {
      containerName: 'trusted',
      blobName: targetBlobName
    }
  }
  return blobStorageConnector.moveBlob(blobConfig)
}

const gdalEnvVars = () => {
  return {
    AZURE_STORAGE_ACCOUNT: process.env.AZURE_STORAGE_ACCOUNT,
    
  }
}
